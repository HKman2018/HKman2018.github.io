[{"categories":["Git 語法"],"contents":"GIT 語法 本地端  在本地端資料夾新增數據庫   git init  從遠端數據庫複製 git clone[url]   git clone https://github.com/username/Personal-website.git  查詢設定列表   git config --list  加檔案進入commit   git add *filename*  加全部檔案進入commit   git add .  查詢commit內file   git status  顯示之前紀錄   git log  記錄commit   git commit -m '訊息' 還原指令  還原工作目錄與索引，會跟最後一次 commit 保持一樣   git reset --hard  全部檔案取消索引   git reset HEAD  單一檔案取消索引   git reset HEAD *filename*  恢復單一檔案到最新 commit 狀態   git checkout *filename*  刪除最近一次 commit   git reset --hard HEAD^  上面語法如果刪除錯了可以再用此語法還原   git reset --hard ORIG_HEAD  刪除最近一次 commit，但保留異動內容   git reset --soft HEAD^  commit 後發現有幾個檔案忘了加入進去，想要補內容進去時   git commit --amend 分支  顯示所有本地分支   git branch  新增分支   git branch 分支名稱  切換分支   git checkout 分支名稱  合併指定分支到目前的分支   git merge 分支名稱  刪除分支   git branch -d 分支名稱 遠端數據庫指令  查詢遠端數據庫   git remote  將本地分支推送到遠端分支   git push 遠端數據庫名稱 遠端分支名稱  將遠端分支拉下來與本地分支進行合併   git pull  查詢遠端分支url   git remote -v  更改遠端分支url   git remote set-url origin https://github.com/username.git ","permalink":"https://hkman2018.github.io/blog/git/","tags":["Git"],"title":"Git 語法"},{"categories":["Markdown語法"],"contents":"box-sizing  \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;box\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; @font-face { font-family: myFirstFont; src: url(sansation_light.woff); } div { font-family: myFirstFont; } ","permalink":"https://hkman2018.github.io/blog/css/","tags":["Markdown"],"title":"CSS"},{"categories":["Markdown語法"],"contents":"#Tic Tac Toe 思路\n如何code tic tac toe game 首先要如何取得O同X的value:  我們在html寫一個div,裡面class為box 之後box裡面有9個細box,給於value ==\u0026gt;data-col=\u0026quot;\u0026quot; ``` \u0026lt;div class=\u0026quot; box\u0026quot;\u0026gt; \u0026lt;div data-col=\u0026quot;0\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div data-col=\u0026quot;1\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div data-col=\u0026quot;2\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div data-col=\u0026quot;3\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div data-col=\u0026quot;4\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div data-col=\u0026quot;5\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div data-col=\u0026quot;6\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div data-col=\u0026quot;7\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div data-col=\u0026quot;8\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ``` 之後在js裡面,用querySelectorAll取得細box的位置, ``` for (let grid of grids) { grid.addEventListener('click', function(e){ console.log(e.target.dataset.col) }) } ``` for loop 取得細box的value ,當知道如何取得9個細value 時 就需要想下判 O 同 x 誰在玩,用let turn=0 作為運行次數 , turn%/2 == 0 當單數是 O, X 則是雙數 ``` let turn; for (let grid of grids) { turn = 0 grid.addEventListener('click', function(e){ if (turn % 2 == 0) { e.currentTarget.innerHTML = '\u0026lt;i class=\u0026quot;far fa-circle \u0026quot;\u0026gt;\u0026lt;/i\u0026gt;'; player.o.push(e.target.dataset.col) } else { e.currentTarget.innerHTML = '\u0026lt;i class=\u0026quot;fa fa-times\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;'; player.x.push(e.target.dataset.col) } turn++ }) } ``` 知道如何取得O,X的value 便要將value儲存： ``` player = { O:[], X:[] } ``` 將已知結果載入 ``` let data = [ [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6] ] ``` 之後我們便對比player 同data 的數值是一樣,如果一樣就勝出 建立function 將player 數值放進,for loop data的array 取得value ``` function checkWin(player) { for (let item of **data**) { let scoreX = 0 let scoreY = 0 for (let index in item) { let playerX = player.x[index] let playerY = player.y[index] if (item[index] == playerX) { scoreX += 1 } else if (item[index] == playerY) { scoreY += 1 } if (scoreX == \u0026quot;3\u0026quot;) { return 'x' } if (scoreY == \u0026quot;3\u0026quot;) { return 'y' } } } } ``` 當return x 時 x 便勝出  另外一種方法，以 data 思維 建立一個\u0008array data 再建立x,y 給於細box (grid.x,grid.y)   let x = 0, y = 0; i = 0; data = [[], [], []] grids = document.querySelectorAll(\u0026quot;.box\u0026quot;); turn = 0; for (let grid of grids) { grid.x = x; grid.y = y; grid.i = i++; data[y][x] = 0; x++; if (x \u0026gt; 2) { x = 0; y++; } grid.addEventListener('click', function(e){ e.currentTarget.x e.currentTarget.y }); } for loop 時 data建立了1個array 內有3個array,3個array有3個數值 分別[0,0,0] 當玩家`click`時 讀取e.vent.currentTarget.x 及e.vent.currentTarget.y 分別放入 data[e.vent.currentTarget.y][e.vent.currentTarget.x]  ","permalink":"https://hkman2018.github.io/blog/tictactoe/","tags":["Markdown"],"title":"CSS"},{"categories":["Markdown語法"],"contents":" 標題大小  H1 # H2 ## H3 ### H4 #### H5 ##### H6 ######   粗體字及斜體 斜體再文字前後加一個星星\n 例～＊斜體＊斜體\n 粗體字再文字前後加兩個星星\n 例～＊＊斜體＊＊ 斜體\n  連結網站  [呈現的文字] (你的網址)\n  連結圖片  ! [] (你的圖片網址or你的圖片路徑)\n   List item List item List item List item List item   List item List item List item List item List item   code 呈現  如果想顯示code ,前後加三個頓號、、、 前面頓號後加程式站言,例如、、、java var a = 1+1 、、、\n var s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s  \u0008markdown 影片介紹   ","permalink":"https://hkman2018.github.io/blog/markdown/","tags":["Markdown"],"title":"Markdown 語法"},{"categories":["Markdown語法"],"contents":"#tecky cademy\nAdd SSH key  ssh-keygen cat .ssh/id_rsa.pub 取得ssh key 加入gitlab\nfunction function(可有參數或無參數){ return 值 } function addSum(){ let sum = 0 //當執行return function時也給於 sum return 的數值, //再執行時sum的值是上次return的值\u0026lt;br\u0026gt; return (num)=\u0026gt;{ sum = sum +num return sum } } const add = addSum()// closure 的addSum現時值為0 console.log(add(3))//值 3 console.log(add(3))//值 6 \u0008 instanceof Object or Array function print() { let final = \u0026quot;\u0026quot;; for (let key in hk) { let value = hk[key] final += key + \u0026quot;: \u0026quot;; if (value instanceof Array) { for (let item of value) { if (item instanceof Object) { final = final + \u0026quot;\\n\u0026quot;; for (let key2 in item) { let value2 = item[key2]; final = final + key + \u0026quot;_\u0026quot; + key2 + \u0026quot;: \u0026quot; + value2 + \u0026quot;\\n\u0026quot; } } else final += item + \u0026quot; 你好\u0026quot;; } } else if (value instanceof Object) { final = final + \u0026quot;\\n\u0026quot;; for (let key2 in value) { let value2 = value[key2]; final = final + key + \u0026quot;_\u0026quot; + key2 + \u0026quot;: \u0026quot; + value2 + \u0026quot;\\n\u0026quot; } } else final += value final += \u0026quot;\\n\u0026quot;; } return final; } console.log(print()) ","permalink":"https://hkman2018.github.io/blog/teckycademy/","tags":["Markdown"],"title":"tecky cademy notes"}]